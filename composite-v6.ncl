;******************************************************************************************************************
;Storm Composite Script by Adam Herrington, 07/2020
;
; This script reads in storm track trajectories generated by the TempestExtremes software (tname)
; Creates a composite of the 2D structure of storms by locating tracked storms in the model i/o (fname)
;
; 1. Create Composite Grid: generates the storm composite grid centered about 0deglat,0deglon with a 30deg radius
; 2. Load Trajectories: parses tracker data and finds storms within month of interest
; 3. Find Relevant Model Output: finds model output containing the month of interest
; 4. Begin Loop:
;   a. Outer loop loops over relevant model i/o files. 
;   b. Inner loop loops over all storms and their tracks.
;   c. Find the time (indt) and storm center (indi) of the storm track entry in the model output.
;   d. Rotate the model output so that the storm center is at 0deg lat & 0deg lon.
;   e. Regrid rotated field to composite grid, which requires rotating the grid descriptor file (SCRIP file).
;   f. After looping through all the tracks of all the storms, compute pdf, take the mean, and dump into a netcdf file.
;
;******************************************************************************************************************
load "$NCARG_ROOT/lib/ncarg/nclscripts/csm/gsn_code.ncl"
load "$NCARG_ROOT/lib/ncarg/nclscripts/csm/gsn_csm.ncl"
load "$NCARG_ROOT/lib/ncarg/nclscripts/csm/contributed.ncl"
load "$NCARG_ROOT/lib/ncarg/nclscripts/esmf/ESMF_regridding.ncl"
external RIP "./rotate2d.so"
;**************************************

  pi = 3.14159265358979
  secpday = 60.*60.*24.

begin

  wcStrt = systemfunc("date")

  debug = False

  ;;Compsite Month to be Analyzed
  monthNam = "JAN"
  imonth = 0
  monthstr = "01"

  VAR = "PRECT"
  sfactor = secpday*1000.

  nbins = 500
  binmin = 0.
  binmax = 500.

  raddist = 30.
  npts = 100
  ncirc= 350
  radout = 20.

  dlim = ""
  if (debug) then
    dlim = "debug."
  end if

  writencdf = True
  fname_out = "composite."+label+"."+VAR+"."+monthNam+".bilin.pdfx."+dlim+"nc"

  srcGridRot = label+"rot_scrip.nc"
  dstGrid = "curvilin-scrip.nc"
  wgtFile = label+"rot_2_curvilin.nc"

;****************************************
; Create Composite Grid
;****************************************

  ;;construct a great circle about 0deglat,0deglon
  alat0 = new ( (/ncirc/), "double")
  alon0 = new ( (/ncirc/), "double")
  clat0 = 0.d0
  clon0 = 0.d0
  nggcog(clat0,clon0,raddist,alat0,alon0)

  ;;construct a curvilinear patch
  lat0 = min(alat0)
  lon0 = min(alon0)
  lat1 = max(alat0)
  lon1 = max(alon0)
  dlat = (lat1-lat0)/tofloat(npts)
  dlon = (lon1-lon0)/tofloat(npts)
  delete([/alat0,alon0/])

  lat2d0 = new ( (/npts,npts/), "double")
  lon2d0 = new ( (/npts,npts/), "double")
  do ny = 0,npts-1
    do nx = 0,npts-1
      lat2d0(nx,ny) = lat0 + ny*dlat
      lon2d0(nx,ny) = lon0 + nx*dlon
    end do
  end do

  ;;setup ESMF options for destination grid
  sOpt = True
  sOpt@ForceOverwrite = True
  if(isfilepresent(dstGrid)) then
    print("Found dstGrid "+dstGrid)
  else
    curvilinear_to_SCRIP(dstGrid,lat2d0,lon2d0,sOpt)
  end if

  fdst = addfile(dstGrid,"r")

  Opt                      = True
  Opt@InterpMethod         = "bilinear" ;; "conserve" ;; "bilinear"

  Opt@DstGridCornerLat      = fdst->grid_corner_lat
  Opt@DstGridCornerLon      = fdst->grid_corner_lon

  Opt@SrcRegional          = False
  Opt@DstRegional          = True
  Opt@ForceOverwrite       = True
  Opt@PrintTimings         = False
  delete(fdst)

;****************************************
; Load Trajectories
;****************************************

  in = addfile(tname,"r")
  cicol= in->cicol
  ctime= in->time
  delete(in)

  cicol@_FillValue= default_fillvalue("integer")
  ctime@_FillValue= default_fillvalue("integer")

  dims = dimsizes(ctime)
  nstorms = dims(0)
  nstime = dims(1)
  delete(dims)

  cyear = new( (/nstorms,nstime/), "integer")
  cmonth= new( (/nstorms,nstime/), "integer")
  cday  = new( (/nstorms,nstime/), "integer")
  chour = new( (/nstorms,nstime/), "integer")

  cyear = cyear@_FillValue
  cmonth= cmonth@_FillValue
  cday  = cday@_FillValue
  chour = chour@_FillValue

  print("total storms " + nstorms)
  do n = 0,nstorms-1
    start = tostring(ctime(n,0))
    startchar = stringtochar(start)
    startmonth = tostring(startchar(4)) + tostring(startchar(5))
    if (startmonth.ne.monthstr) then
      ctime(n,:) = ctime@_FillValue
    else
      do m = 0,nstime-1
        if (ismissing(ctime(n,m))) then
          continue
        else
          now = tostring(ctime(n,m))
          nowchar = stringtochar(now)
          yeartmp = tostring(nowchar(0)) + tostring(nowchar(1)) + tostring(nowchar(2)) + tostring(nowchar(3))
          monthtmp= tostring(nowchar(4)) + tostring(nowchar(5))
          daytmp  = tostring(nowchar(6)) + tostring(nowchar(7))
          hourtmp = tostring(nowchar(8)) + tostring(nowchar(9))
      
          cyear(n,m) = tointeger(yeartmp)
          cmonth(n,m)= tointeger(monthtmp)
          cday(n,m)  = tointeger(daytmp)
          chour(n,m) = tointeger(hourtmp)
          delete([/now,nowchar,yeartmp,monthtmp,daytmp,hourtmp/])
        end if
      end do
    end if
    delete([/start,startchar,startmonth/])
  end do
  indnew = ind(.not.ismissing(ctime(:,0)))
  newnstorms = dimsizes(indnew)
  print("total " + monthNam + " storms " + newnstorms)

  newcyear = new( (/newnstorms,nstime/), "integer")
  newcmonth= new( (/newnstorms,nstime/), "integer")
  newcday  = new( (/newnstorms,nstime/), "integer")
  newchour = new( (/newnstorms,nstime/), "integer")  
  newctime = new( (/newnstorms,nstime/), "integer")
  newcicol = new( (/newnstorms,nstime/), "integer")

  newcyear = cyear(indnew,:)
  newcmonth= cmonth(indnew,:)
  newcday  = cday(indnew,:)
  newchour = chour(indnew,:)
  newctime = ctime(indnew,:)
  newcicol = cicol(indnew,:)
  delete([/cyear,cmonth,cday,chour,ctime,cicol/])

  cyear = newcyear
  cmonth= newcmonth
  cday  = newcday
  chour = newchour
  ctime = newctime
  cicol = newcicol
  nstorms = newnstorms
  delete([/newcyear,newcmonth,newcday,newchour,newctime,newcicol/])

;****************************************
; Find Relevant Model Output
;****************************************

  files = systemfunc ("ls " + dir + fname + rdir + fname + ".cam."+fincl+"*")

  if (debug) then 
    nf = 12
  else
    nf = dimsizes(files)
  end if
  print("total files " + nf)

  indraw = new( (/nf/), "integer")
  do n = 0,nf-1

    in = addfile (files(n),"r")
    time = in->time
    delete(in)

    utc = cd_calendar(time,0)
    smnths = tointeger(utc(:,1))
    delete(utc)   

    if (monthNam.eq."DEC") then
      indt = ind(smnths.eq.(imonth+1) .or. smnths.eq.1)
    else
      indt = ind(smnths.eq.(imonth+1) .or. smnths.eq.(imonth+2))
    end if

    if (any(ismissing(indt))) then
      indraw(n) = indraw@_FillValue
    else
      indraw(n) = n
    end if
    delete([/time,smnths,indt/])
  end do

  indgd = ind(.not.ismissing(indraw))
  ngd = dimsizes(indgd)
  newfiles = files(indgd)

  print("total "+monthNam+" files " + ngd)

;****************************************
; Begin Loop
;****************************************

  allstorms = new( (/nstorms,nstime,npts,npts/), "float")
  allstorms = allstorms@_FillValue
  do n = 0,ngd-1
    print("loading file " + newfiles(n)) 
    in = addfile (newfiles(n),"r") 
    time = in->time
    lat1d= in->lat
    lon1d= in->lon
    if (VAR.eq."PRECT") then
      var = (in->PRECC) + (in->PRECL)
    else
      var = in->$VAR$
    end if
    var = var*sfactor
    delete(in)

    if (n.eq.0) then
      ncols = dimsizes(lon1d)
      latrot1d = new( (/ncols/), "double")
      lonrot1d = new( (/ncols/), "double")

      lat1drad = lat1d*pi/180.d0
      lon1drad = lon1d*pi/180.d0
    end if

    utc = cd_calendar(time,0)
    year = tointeger(utc(:,0))
    month= tointeger(utc(:,1))
    day  = tointeger(utc(:,2))
    hour = tointeger(utc(:,3))

    do m = 0,nstorms-1
      print("  m = " + (m+1) + "/" + nstorms)

      ind0 = ind(year.eq.cyear(m,0) .and. month.eq.cmonth(m,0) .and. \
                  day.eq.cday(m,0) .and. hour.eq.chour(m,0))      
      if (ismissing(ind0)) then
          delete(ind0)
          continue
      end if
      delete(ind0)

      nthistrack = num(.not.ismissing(cyear(m,:)))
      indthistrack = ind(.not.ismissing(cyear(m,:)))

      do mm = 0,nthistrack-1
        ;;wc0 = systemfunc("date")
        print("    mm = " + (mm+1) + "/" + nthistrack)
        mmm = indthistrack(mm)
        indt = ind(year.eq.cyear(m,mmm) .and. month.eq.cmonth(m,mmm) .and. \
  	           day.eq.cday(m,mmm) .and. hour.eq.chour(m,mmm))
        indi = cicol(m,mmm)

        if (ismissing(indt)) then
          continue
        end if

        ;;;wc0 = systemfunc("date")

        ;;rotate storm center to 0deg lat and 0deg lon
        Plat = -0.5d0*pi + (lat1d(indi)*pi/180.d0)
        Plon = lon1d(indi)*pi/180.d0

        lattmp = lat1d*pi/180.d0
        lontmp = lon1d*pi/180.d0

        RIP::regrot(lon1drad,lat1drad,lonrot1d,latrot1d,Plon,Plat,ncols)

        latrot1d = latrot1d*180.d0/pi
        lonrot1d = lonrot1d*180.d0/pi

        ;;;wallClockElapseTime(wc0, "regrot time", 0)
        ;;;wc0 = systemfunc("date")

        ;;rotate SCRIP grid
        system("/bin/cp " + srcGrid + " " + srcGridRot)

        ;;;wallClockElapseTime(wc0, "copy SCRIP time", 0)
        ;;;wc0 = systemfunc("date")

        sf = addfile(srcGridRot,"w")         
        dNames = getfiledimnames(sf)
        dSizes = getfiledimsizes(sf)
        indcor = ind(dNames.eq."grid_corners")
        ncorners = dSizes(indcor) 
        delete([/dNames,dSizes,indcor/])

        grid_corner_lat = sf->grid_corner_lat
        grid_corner_lon = sf->grid_corner_lon
        grid_center_lat = sf->grid_center_lat
        grid_center_lon = sf->grid_center_lon

        do k = 0,ncorners-1
          lattmp = grid_corner_lat(:,k)*pi/180.d0
          lontmp = grid_corner_lon(:,k)*pi/180.d0
          latrottmp = lattmp
          lonrottmp = lontmp

          RIP::regrot(lontmp,lattmp,lonrottmp,latrottmp,Plon,Plat,ncols)

          grid_corner_lat(:,k) = latrottmp*180.d0/pi
          grid_corner_lon(:,k) = lonrottmp*180.d0/pi
        end do        

        lattmp = grid_center_lat*pi/180.d0
        lontmp = grid_center_lon*pi/180.d0
        latrottmp = lattmp
        lonrottmp = lontmp
          
        RIP::regrot(lontmp,lattmp,lonrottmp,latrottmp,Plon,Plat,ncols)
          
        grid_center_lat = latrottmp*180.d0/pi
        grid_center_lon = lonrottmp*180.d0/pi

        sf->grid_center_lat = grid_center_lat
        sf->grid_center_lon = grid_center_lon
        sf->grid_corner_lat = grid_corner_lat
        sf->grid_corner_lon = grid_corner_lon
        delete(sf)

        ;;;wallClockElapseTime(wc0, "rotate SCRIP time", 0)
        ;;;wc0 = systemfunc("date")

        fsrc = addfile(srcGridRot,"r")
        Opt@SrcGridCornerLat      = fsrc->grid_corner_lat
        Opt@SrcGridCornerLon      = fsrc->grid_corner_lon
        ESMF_regrid_gen_weights(srcGridRot,dstGrid,wgtFile,Opt)        
        delete(fsrc)

        ;;;wallClockElapseTime(wc0, "wgt generation time", 0)
        ;;;wc0 = systemfunc("date")

        var_regrid = ESMF_regrid_with_weights(var(indt,:),wgtFile,False)

        ;;;wallClockElapseTime(wc0, "regrid time", 0)

        print("    max varstorm " + max(var_regrid))
        print("    min varstorm " + min(var_regrid))

        allstorms(m,mmm,:,:) = var_regrid

        delete([/indt,indi,Opt@SrcGridCornerLat,Opt@SrcGridCornerLon,var_regrid/])

        ;;wallClockElapseTime(wc0, "    loop time", 0)

      end do 
      delete(indthistrack)
    end do
    delete([/var,lat1d,lon1d,utc,year,month,day,hour,time/])
  end do

  printVarSummary(allstorms)

  delete([/allstorms@lat2d,allstorms@lon2d/])

  nall = num(.not.ismissing(allstorms(:,:,0,0)))
  nnewstorms = num(.not.ismissing(allstorms(:,0,0,0)))

  print("total storms: " + nnewstorms)
  print("total storm snapshots: " + nall)
  print("MAX var: " + max(allstorms))
  print("MIN var: " + min(allstorms))

  lat1d0 = new ( (/ncirc/), "float")
  lon1d0 = new ( (/ncirc/), "float")
  nggcog(0.d0,0.d0,radout,lat1d0,lon1d0)
  in_circle = gc_inout(lat2d0,lon2d0,lat1d0,lon1d0)
  
  var = allstorms
  do i = 0,nstorms-1
    do j = 0,nstime-1
      var(i,j,:,:) = where(in_circle,var(i,j,:,:),var@_FillValue)
    end do
  end do

  print("MAX circle var: " + max(var))
  print("MIN circle var: " + min(var))

  print("computing pdf...")

  opt = True
  opt@bin_min = binmin
  opt@bin_max = binmax

  var1d = ndtooned(var)
  indvar = ind(.not.ismissing(var1d))
  newvar1d = var1d(indvar)
  pdfvar = pdfx(newvar1d,nbins,opt)

  print("average over all snapshots")
  barstorms = dim_avg_n(var,1)
  bar = dim_avg_n(barstorms,0) 
  bar!0 = "x0"
  bar!1 = "y0"
  lat2d0!0 = "x0"
  lat2d0!1 = "y0"
  lon2d0!0 = "x0"
  lon2d0!1 = "y0"

  if (writencdf) then
    print("writing netcdf " + fname_out)
    system("/bin/rm -f "+outdir+fname_out)
    ncdf = addfile(outdir+fname_out,"c")
    ncdf->pdfvar  = pdfvar
    ncdf->bar = bar
    ncdf->lat2d = lat2d0
    ncdf->lon2d = lon2d0
    ncdf->nstorms = nnewstorms
    ncdf->nall    = nall
    ncdf->raddist = radout
  end if
  delete(bar)

  print("Done with case")

  wallClockElapseTime(wcStrt, "Total script time", 0)

end
